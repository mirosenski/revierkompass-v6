import { RouteResult } from '@/lib/store/app-store';
import React from 'react';
export declare const useStep2Logic: () => {
    activeView: "map" | "grid" | "list" | "compact";
    setActiveView: React.Dispatch<React.SetStateAction<"map" | "grid" | "list" | "compact">>;
    activeTab: "custom" | "stations";
    setActiveTab: React.Dispatch<React.SetStateAction<"custom" | "stations">>;
    isPanelOpen: boolean;
    setIsPanelOpen: React.Dispatch<React.SetStateAction<boolean>>;
    searchQuery: string;
    setSearchQuery: React.Dispatch<React.SetStateAction<string>>;
    showAddForm: boolean;
    setShowAddForm: React.Dispatch<React.SetStateAction<boolean>>;
    expandedPraesidien: Set<string>;
    formData: {
        name: string;
        street: string;
        zipCode: string;
        city: string;
    };
    setFormData: React.Dispatch<React.SetStateAction<{
        name: string;
        street: string;
        zipCode: string;
        city: string;
    }>>;
    routes: RouteResult[];
    isLoading: boolean;
    searchInputRef: React.MutableRefObject<HTMLInputElement>;
    stations: import("../../../../types/station.types").Station[];
    selectedStations: string[];
    selectedCustomAddresses: string[];
    customAddresses: import("@/lib/store/app-store").CustomAddress[];
    praesidiumWithReviere: {
        reviere: import("../../../../types/station.types").Station[];
        selectedCount: number;
        id: string;
        name: string;
        type: "praesidium" | "revier";
        city: string;
        address: string;
        coordinates: [number, number];
        telefon: string;
        email?: string;
        notdienst24h: boolean;
        isActive: boolean;
        lastModified: string;
        parentId?: string;
        isEmergency?: boolean;
    }[];
    togglePraesidiumWithReviere: (praesidiumId: string) => void;
    handleStationToggle: (stationId: string) => void;
    togglePraesidiumExpansion: (praesidiumId: string) => void;
    handleCustomToggle: (addressId: string) => void;
    handleAddAddress: () => void;
    handleDeleteAddress: (addressId: string) => void;
    handleContinue: () => void;
    announceToScreenReader: (message: string) => void;
    handleVoiceCommand: (command: string) => void;
    handleCommand: (command: string) => void;
};
