import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { motion, AnimatePresence } from 'framer-motion';
import { Building, MapPin, Plus, CheckCircle2 } from 'lucide-react';
import InteractiveMap from '@/components/map/InteractiveMap';
import PraesidiumCard from './PraesidiumCard';
import CustomAddressForm from './CustomAddressForm';
import { animationVariants } from '../animations/variants';
const TabContent = ({ activeTab, activeView, searchQuery, praesidiumWithReviere, selectedStations, expandedPraesidien, customAddresses, selectedCustomAddresses, routes, showAddForm, formData, setFormData, onTogglePraesidium, onExpandPraesidium, onStationToggle, onCustomToggle, onAddAddress, onCancelAddForm, onToggleAddForm, onMarkerClick }) => {
    return (_jsxs(AnimatePresence, { mode: "wait", children: [activeTab === 'stations' && (_jsx(motion.div, { initial: { opacity: 0, x: 20 }, animate: { opacity: 1, x: 0 }, exit: { opacity: 0, x: -20 }, transition: { duration: 0.3 }, className: "space-y-6", children: _jsxs(AnimatePresence, { mode: "wait", children: [activeView === 'grid' && (_jsx(motion.div, { variants: animationVariants.container, initial: "hidden", animate: "show", className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6", children: praesidiumWithReviere
                                .filter(p => searchQuery === '' ||
                                p.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                                p.city.toLowerCase().includes(searchQuery.toLowerCase()) ||
                                p.reviere.some(r => r.name.toLowerCase().includes(searchQuery.toLowerCase())))
                                .map((praesidium) => (_jsx(PraesidiumCard, { praesidium: praesidium, onToggle: onTogglePraesidium, onExpand: () => onExpandPraesidium(praesidium.id), onStationToggle: onStationToggle, selectedStations: selectedStations, viewMode: "grid", expandedPraesidien: expandedPraesidien }, praesidium.id))) }, "grid")), activeView === 'list' && (_jsx(motion.div, { variants: animationVariants.container, initial: "hidden", animate: "show", className: "space-y-4", children: praesidiumWithReviere
                                .filter(p => searchQuery === '' ||
                                p.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                                p.city.toLowerCase().includes(searchQuery.toLowerCase()) ||
                                p.reviere.some(r => r.name.toLowerCase().includes(searchQuery.toLowerCase())))
                                .map((praesidium) => (_jsx(motion.div, { layout: true, initial: { opacity: 0, y: 20 }, animate: { opacity: 1, y: 0 }, exit: { opacity: 0, y: -20 }, className: "bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden", children: _jsx(PraesidiumCard, { praesidium: praesidium, onToggle: onTogglePraesidium, onExpand: () => onExpandPraesidium(praesidium.id), onStationToggle: onStationToggle, selectedStations: selectedStations, viewMode: "list", expandedPraesidien: expandedPraesidien }) }, praesidium.id))) }, "list")), activeView === 'compact' && (_jsx(motion.div, { variants: animationVariants.container, initial: "hidden", animate: "show", className: "space-y-2", children: praesidiumWithReviere
                                .filter(p => searchQuery === '' ||
                                p.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                                p.city.toLowerCase().includes(searchQuery.toLowerCase()) ||
                                p.reviere.some(r => r.name.toLowerCase().includes(searchQuery.toLowerCase())))
                                .map((praesidium) => (_jsx(motion.div, { className: `p-4 rounded-lg border-2 cursor-pointer transition-all duration-200 ${praesidium.selectedCount > 0
                                    ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                                    : 'border-gray-200 dark:border-gray-700 hover:border-gray-300'}`, onClick: () => onTogglePraesidium(praesidium.id), whileHover: { x: 4 }, role: "button", tabIndex: 0, "aria-pressed": praesidium.selectedCount > 0, children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { className: "flex items-center space-x-3", children: [_jsx(Building, { className: "h-5 w-5 text-blue-600" }), _jsxs("div", { children: [_jsx("span", { className: "font-medium text-gray-900 dark:text-white", children: praesidium.name }), _jsxs("span", { className: "text-sm text-gray-500 dark:text-gray-400 ml-2", children: ["(", praesidium.city, ")"] })] })] }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsxs("span", { className: "text-sm text-gray-500 dark:text-gray-400", children: [praesidium.reviere.length, " Reviere"] }), praesidium.selectedCount > 0 && (_jsx("span", { className: "px-2 py-1 bg-blue-600 text-white text-xs rounded-full", children: praesidium.selectedCount }))] })] }) }, praesidium.id))) }, "compact")), activeView === 'map' && (_jsx("div", { className: "py-4", children: _jsx(InteractiveMap, { routeResults: routes, startAddress: "Stuttgart, Schlossplatz", startCoordinates: { lat: 48.7784, lng: 9.1806 }, onMarkerClick: onMarkerClick }) }))] }) }, "stations")), activeTab === 'custom' && (_jsxs(motion.div, { initial: { opacity: 0, x: 20 }, animate: { opacity: 1, x: 0 }, exit: { opacity: 0, x: -20 }, transition: { duration: 0.3 }, className: "space-y-6", children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsx("h3", { className: "text-lg font-semibold text-gray-900 dark:text-white", children: "Eigene Adressen verwalten" }), _jsxs("button", { onClick: onToggleAddForm, className: "flex items-center space-x-2 px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors", children: [_jsx(Plus, { className: "h-4 w-4" }), _jsx("span", { children: "Neue Adresse" })] })] }), _jsx(CustomAddressForm, { showAddForm: showAddForm, formData: formData, setFormData: setFormData, onAddAddress: onAddAddress, onCancel: onCancelAddForm }), _jsx("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6", children: (() => {
                            if (customAddresses.length === 0) {
                                return (_jsxs("div", { className: "col-span-full text-center py-12 text-gray-500 dark:text-gray-400", children: [_jsx(MapPin, { className: "h-12 w-12 mx-auto mb-4 opacity-50" }), _jsx("p", { children: "Noch keine eigenen Adressen vorhanden." }), _jsx("p", { className: "text-sm", children: "F\u00FCgen Sie Ihre erste Adresse hinzu!" })] }));
                            }
                            const filteredAddresses = customAddresses.filter(addr => searchQuery === '' ||
                                addr.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                                addr.city.toLowerCase().includes(searchQuery.toLowerCase()) ||
                                addr.street.toLowerCase().includes(searchQuery.toLowerCase()));
                            return filteredAddresses.map((address) => {
                                return (_jsx(motion.div, { className: `address-card p-6 rounded-xl border transition-all duration-200 cursor-pointer hover:shadow-lg ${selectedCustomAddresses.includes(address.id)
                                        ? 'border-green-500 bg-green-50 dark:bg-green-900/20 shadow-md'
                                        : 'border-gray-200 dark:border-gray-600 hover:border-gray-300'}`, onClick: () => onCustomToggle(address.id), whileHover: { scale: 1.02 }, whileTap: { scale: 0.98 }, children: _jsxs("div", { className: "flex justify-between items-start mb-4", children: [_jsxs("div", { className: "flex items-center space-x-3", children: [_jsx(MapPin, { className: "h-6 w-6 text-green-600" }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-gray-900 dark:text-white", children: address.name }), _jsx("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: address.street }), _jsxs("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: [address.zipCode, " ", address.city] })] })] }), _jsx(CheckCircle2, { className: `h-6 w-6 transition-colors ${selectedCustomAddresses.includes(address.id)
                                                    ? 'text-green-500'
                                                    : 'text-gray-300 dark:text-gray-600'}` })] }) }, address.id));
                            });
                        })() })] }, "custom"))] }));
};
export default TabContent;
