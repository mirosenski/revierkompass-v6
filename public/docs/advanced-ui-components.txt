// components/AddressCard.tsx
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  MapPin, Edit2, Trash2, Clock, Database, 
  CheckCircle, AlertCircle, Loader2, MoreVertical,
  Copy, Share2, Navigation
} from 'lucide-react';
import { CustomAddress } from '../types';
import { toast } from 'react-hot-toast';

interface AddressCardProps {
  address: CustomAddress;
  isSelected: boolean;
  isPending?: boolean;
  onSelect: (id: string) => void;
  onEdit?: (address: CustomAddress) => void;
  onDelete?: (id: string) => void;
  onNavigate?: (address: CustomAddress) => void;
}

export const AddressCard: React.FC<AddressCardProps> = ({
  address,
  isSelected,
  isPending = false,
  onSelect,
  onEdit,
  onDelete,
  onNavigate
}) => {
  const [showMenu, setShowMenu] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);

  const handleDelete = async () => {
    if (!onDelete) return;
    
    setIsDeleting(true);
    try {
      await onDelete(address.id);
    } finally {
      setIsDeleting(false);
    }
  };

  const handleCopyAddress = () => {
    const fullAddress = `${address.street}, ${address.zipCode} ${address.city}`;
    navigator.clipboard.writeText(fullAddress);
    toast.success('Adresse kopiert!');
    setShowMenu(false);
  };

  const handleShare = async () => {
    const fullAddress = `${address.street}, ${address.zipCode} ${address.city}`;
    
    if (navigator.share) {
      try {
        await navigator.share({
          title: address.name,
          text: fullAddress,
          url: `https://maps.google.com/?q=${encodeURIComponent(fullAddress)}`
        });
      } catch (err) {
        // User cancelled share
      }
    } else {
      handleCopyAddress();
    }
    setShowMenu(false);
  };

  return (
    <motion.div
      layout
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, x: -100 }}
      whileHover={{ scale: 1.02 }}
      className={`
        relative p-6 rounded-xl border-2 transition-all duration-200
        ${isSelected 
          ? 'border-green-500 bg-green-50 dark:bg-green-900/20 shadow-lg' 
          : 'border-gray-200 dark:border-gray-700 hover:border-gray-300'
        }
        ${isPending ? 'opacity-60' : ''}
      `}
    >
      {/* Pending Overlay */}
      {isPending && (
        <div className="absolute inset-0 bg-white/50 dark:bg-gray-900/50 rounded-xl flex items-center justify-center z-10">
          <Loader2 className="w-6 h-6 animate-spin text-blue-600" />
        </div>
      )}

      {/* Main Content */}
      <div 
        className="cursor-pointer"
        onClick={() => onSelect(address.id)}
      >
        <div className="flex justify-between items-start mb-4">
          <div className="flex items-start space-x-3">
            <div className={`
              p-2 rounded-lg transition-colors
              ${isSelected 
                ? 'bg-green-600 text-white' 
                : 'bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-400'
              }
            `}>
              <MapPin className="w-5 h-5" />
            </div>
            
            <div className="flex-1">
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-1">
                {address.name}
              </h3>
              <p className="text-sm text-gray-600 dark:text-gray-400">
                {address.street}
              </p>
              <p className="text-sm text-gray-600 dark:text-gray-400">
                {address.zipCode} {address.city}
              </p>
            </div>
          </div>

          <AnimatePresence>
            {isSelected && (
              <motion.div
                initial={{ scale: 0 }}
                animate={{ scale: 1 }}
                exit={{ scale: 0 }}
                className="text-green-500"
              >
                <CheckCircle className="w-6 h-6" />
              </motion.div>
            )}
          </AnimatePresence>
        </div>

        {/* Address Type & Status */}
        <div className="flex items-center gap-2 mb-4">
          {address.addressType === 'temporary' ? (
            <span className="inline-flex items-center gap-1 px-2.5 py-1 text-xs font-medium bg-orange-100 dark:bg-orange-900/20 text-orange-800 dark:text-orange-400 rounded-full">
              <Clock className="w-3 h-3" />
              Temporär
            </span>
          ) : (
            <span className="inline-flex items-center gap-1 px-2.5 py-1 text-xs font-medium bg-blue-100 dark:bg-blue-900/20 text-blue-800 dark:text-blue-400 rounded-full">
              <Database className="w-3 h-3" />
              Permanent
            </span>
          )}
          
          {address.reviewStatus === 'pending' && (
            <span className="inline-flex items-center gap-1 px-2.5 py-1 text-xs font-medium bg-yellow-100 dark:bg-yellow-900/20 text-yellow-800 dark:text-yellow-400 rounded-full">
              <AlertCircle className="w-3 h-3" />
              In Prüfung
            </span>
          )}
        </div>
      </div>

      {/* Action Buttons */}
      <div className="flex items-center justify-between pt-4 border-t border-gray-200 dark:border-gray-700">
        <div className="flex items-center gap-2">
          {onNavigate && (
            <button
              onClick={(e) => {
                e.stopPropagation();
                onNavigate(address);
              }}
              className="p-2 text-blue-600 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded-lg transition-colors"
              title="Navigation starten"
            >
              <Navigation className="w-4 h-4" />
            </button>
          )}
          
          {onEdit && (
            <button
              onClick={(e) => {
                e.stopPropagation();
                onEdit(address);
              }}
              className="p-2 text-gray-600 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors"
              title="Bearbeiten"
            >
              <Edit2 className="w-4 h-4" />
            </button>
          )}
          
          {onDelete && (
            <button
              onClick={(e) => {
                e.stopPropagation();
                handleDelete();
              }}
              disabled={isDeleting}
              className="p-2 text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg transition-colors disabled:opacity-50"
              title="Löschen"
            >
              {isDeleting ? (
                <Loader2 className="w-4 h-4 animate-spin" />
              ) : (
                <Trash2 className="w-4 h-4" />
              )}
            </button>
          )}
        </div>

        {/* More Options Menu */}
        <div className="relative">
          <button
            onClick={(e) => {
              e.stopPropagation();
              setShowMenu(!showMenu);
            }}
            className="p-2 text-gray-600 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors"
          >
            <MoreVertical className="w-4 h-4" />
          </button>
          
          <AnimatePresence>
            {showMenu && (
              <motion.div
                initial={{ opacity: 0, scale: 0.95 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.95 }}
                className="absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 py-1 z-20"
              >
                <button
                  onClick={handleCopyAddress}
                  className="w-full px-4 py-2 text-left text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center gap-2"
                >
                  <Copy className="w-4 h-4" />
                  Adresse kopieren
                </button>
                <button
                  onClick={handleShare}
                  className="w-full px-4 py-2 text-left text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center gap-2"
                >
                  <Share2 className="w-4 h-4" />
                  Teilen
                </button>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </div>

      {/* Click outside to close menu */}
      {showMenu && (
        <div
          className="fixed inset-0 z-10"
          onClick={() => setShowMenu(false)}
        />
      )}
    </motion.div>
  );
};

// components/AddressFormAdvanced.tsx
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { 
  MapPin, Loader2, Search, CheckCircle, 
  AlertTriangle, Info
} from 'lucide-react';
import { useGeocoding } from '../hooks/useGeocoding';
import { useAddressValidation } from '../hooks/useAddressValidation';

interface AddressFormAdvancedProps {
  formData: any;
  setFormData: (data: any) => void;
  onSubmit: () => void;
  onCancel: () => void;
  isEditing?: boolean;
}

export const AddressFormAdvanced: React.FC<AddressFormAdvancedProps> = ({
  formData,
  setFormData,
  onSubmit,
  onCancel,
  isEditing = false
}) => {
  const { geocodeAddress, isGeocoding } = useGeocoding();
  const { validation, validateField, validateAll, clearErrors } = useAddressValidation();
  const [showGeocodingHint, setShowGeocodingHint] = useState(false);

  const handleFieldChange = (field: string, value: string) => {
    setFormData({ ...formData, [field]: value });
    validateField(field, value);
  };

  const handleGeocode = async () => {
    if (!formData.street || !formData.zipCode || !formData.city) {
      toast.error('Bitte füllen Sie zuerst alle Adressfelder aus');
      return;
    }

    const coords = await geocodeAddress(
      formData.street,
      formData.zipCode,
      formData.city
    );

    if (coords) {
      setFormData({ ...formData, coordinates: coords });
      setShowGeocodingHint(true);
      setTimeout(() => setShowGeocodingHint(false), 3000);
    }
  };

  const handleSubmit = () => {
    if (validateAll(formData)) {
      onSubmit();
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="space-y-6"
    >
      {/* Address Type Selection (already implemented) */}
      
      {/* Form Fields with Validation */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Name/Bezeichnung *
          </label>
          <input
            type="text"
            value={formData.name}
            onChange={(e) => handleFieldChange('name', e.target.value)}
            placeholder="z.B. Büro, Zuhause, Kunde"
            className={`
              w-full px-3 py-2 border rounded-lg transition-colors
              ${validation.errors.name 
                ? 'border-red-500 focus:ring-red-500' 
                : 'border-gray-300 focus:ring-blue-500'
              }
            `}
          />
          {validation.errors.name && (
            <p className="mt-1 text-xs text-red-600 flex items-center gap-1">
              <AlertTriangle className="w-3 h-3" />
              {validation.errors.name}
            </p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Straße und Hausnummer *
          </label>
          <input
            type="text"
            value={formData.street}
            onChange={(e) => handleFieldChange('street', e.target.value)}
            placeholder="z.B. Musterstraße 123"
            className={`
              w-full px-3 py-2 border rounded-lg transition-colors
              ${validation.errors.street 
                ? 'border-red-500 focus:ring-red-500' 
                : 'border-gray-300 focus:ring-blue-500'
              }
            `}
          />
          {validation.errors.street && (
            <p className="mt-1 text-xs text-red-600 flex items-center gap-1">
              <AlertTriangle className="w-3 h-3" />
              {validation.errors.street}
            </p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            PLZ *
          </label>
          <input
            type="text"
            value={formData.zipCode}
            onChange={(e) => handleFieldChange('zipCode', e.target.value)}
            placeholder="z.B. 70173"
            maxLength={5}
            className={`
              w-full px-3 py-2 border rounded-lg transition-colors
              ${validation.errors.zipCode 
                ? 'border-red-500 focus:ring-red-500' 
                : 'border-gray-300 focus:ring-blue-500'
              }
            `}
          />
          {validation.errors.zipCode && (
            <p className="mt-1 text-xs text-red-600 flex items-center gap-1">
              <AlertTriangle className="w-3 h-3" />
              {validation.errors.zipCode}
            </p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Stadt *
          </label>
          <input
            type="text"
            value={formData.city}
            onChange={(e) => handleFieldChange('city', e.target.value)}
            placeholder="z.B. Stuttgart"
            className={`
              w-full px-3 py-2 border rounded-lg transition-colors
              ${validation.errors.city 
                ? 'border-red-500 focus:ring-red-500' 
                : 'border-gray-300 focus:ring-blue-500'
              }
            `}
          />
          {validation.errors.city && (
            <p className="mt-1 text-xs text-red-600 flex items-center gap-1">
              <AlertTriangle className="w-3 h-3" />
              {validation.errors.city}
            </p>
          )}
        </div>
      </div>

      {/* Geocoding Section */}
      <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-4">
        <div className="flex items-center justify-between mb-2">
          <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300">
            Koordinaten
          </h4>
          <button
            type="button"
            onClick={handleGeocode}
            disabled={isGeocoding}
            className="flex items-center gap-2 px-3 py-1 text-sm bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors disabled:opacity-50"
          >
            {isGeocoding ? (
              <>
                <Loader2 className="w-3 h-3 animate-spin" />
                Suche...
              </>
            ) : (
              <>
                <Search className="w-3 h-3" />
                Automatisch ermitteln
              </>
            )}
          </button>
        </div>
        
        {formData.coordinates && (
          <div className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
            <CheckCircle className="w-4 h-4 text-green-500" />
            <span>
              {formData.coordinates[0].toFixed(6)}, {formData.coordinates[1].toFixed(6)}
            </span>
          </div>
        )}
        
        <AnimatePresence>
          {showGeocodingHint && (
            <motion.div
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -10 }}
              className="mt-2 p-2 bg-green-100 dark:bg-green-900/20 text-green-800 dark:text-green-400 rounded-lg text-xs flex items-center gap-2"
            >
              <Info className="w-3 h-3" />
              Koordinaten erfolgreich ermittelt!
            </motion.div>
          )}
        </AnimatePresence>
      </div>

      {/* Action Buttons */}
      <div className="flex items-center justify-between pt-4 border-t border-gray-200 dark:border-gray-700">
        <button
          type="button"
          onClick={onCancel}
          className="px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors"
        >
          Abbrechen
        </button>
        
        <button
          type="button"
          onClick={handleSubmit}
          disabled={!validation.isValid && Object.keys(validation.errors).length > 0}
          className="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
        >
          {isEditing ? 'Aktualisieren' : 'Hinzufügen'}
        </button>
      </div>
    </motion.div>
  );
};